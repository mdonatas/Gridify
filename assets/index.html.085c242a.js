import{r as e,o,c as h,a as t,b as i,w as b,F as g,e as l,p as v,f as c,d as a}from"./app.31b78258.js";import{_ as p}from"./plugin-vue_export-helper.21dcd24c.js";const y={},r=d=>(v("data-v-1d692bd7"),d=d(),c(),d),u=l('<h1 id="introduction" tabindex="-1" data-v-1d692bd7><a class="header-anchor" href="#introduction" aria-hidden="true" data-v-1d692bd7>#</a> Introduction</h1><p data-v-1d692bd7>Gridify is a dynamic LINQ library that converts your <em data-v-1d692bd7>strings</em> to a LINQ query in the easiest way possible with excellent performance. it also provides an easy way to apply Filtering, Sorting, and pagination using text-based data.</p><h2 id="features" tabindex="-1" data-v-1d692bd7><a class="header-anchor" href="#features" aria-hidden="true" data-v-1d692bd7>#</a> Features</h2><ul data-v-1d692bd7><li data-v-1d692bd7>It&#39;s Fast and easy to use</li><li data-v-1d692bd7>Supports filtering, sorting, and pagination</li><li data-v-1d692bd7>Supports <code data-v-1d692bd7>string</code> to LINQ conversion</li><li data-v-1d692bd7>Supports nested queries and sub-collections</li><li data-v-1d692bd7>Supports <code data-v-1d692bd7>string</code> to <code data-v-1d692bd7>object</code> mapping</li><li data-v-1d692bd7>Supports query compilation</li><li data-v-1d692bd7>Supports collection indexes</li><li data-v-1d692bd7>Custom Operators</li><li data-v-1d692bd7>Compatible with ORMs specially Entity Framework</li><li data-v-1d692bd7>Can be used on every collection that LINQ supports</li><li data-v-1d692bd7>Compatible with Object-mappers like AutoMapper</li></ul><h2 id="examples" tabindex="-1" data-v-1d692bd7><a class="header-anchor" href="#examples" aria-hidden="true" data-v-1d692bd7>#</a> Examples</h2><p data-v-1d692bd7>To better illustrate how Gridify works, I have prepared a few examples.</p><p data-v-1d692bd7>Be sure to check out these examples</p>',7),x=a("Using Gridify in API Controllers"),m=r(()=>t("li",null,"Coming soon ...",-1)),_=l('<h2 id="performance" tabindex="-1" data-v-1d692bd7><a class="header-anchor" href="#performance" aria-hidden="true" data-v-1d692bd7>#</a> Performance</h2><p data-v-1d692bd7>Filtering is the most expensive feature in gridify. the following benchmark is comparing filtering in the most known dynamic linq libraries. As you can see, gridify has the closest result to the native linq.</p><table data-v-1d692bd7><thead data-v-1d692bd7><tr data-v-1d692bd7><th data-v-1d692bd7>Method</th><th style="text-align:right;" data-v-1d692bd7>Mean</th><th style="text-align:right;" data-v-1d692bd7>Error</th><th style="text-align:right;" data-v-1d692bd7>Ratio</th><th style="text-align:right;" data-v-1d692bd7>Gen 0</th><th style="text-align:right;" data-v-1d692bd7>Gen 1</th><th style="text-align:right;" data-v-1d692bd7>Allocated</th></tr></thead><tbody data-v-1d692bd7><tr data-v-1d692bd7><td data-v-1d692bd7>Native LINQ</td><td style="text-align:right;" data-v-1d692bd7>806.3 us</td><td style="text-align:right;" data-v-1d692bd7>4.89 us</td><td style="text-align:right;" data-v-1d692bd7>1.00</td><td style="text-align:right;" data-v-1d692bd7>4.8828</td><td style="text-align:right;" data-v-1d692bd7>1.9531</td><td style="text-align:right;" data-v-1d692bd7>35 KB</td></tr><tr data-v-1d692bd7><td data-v-1d692bd7>Gridify</td><td style="text-align:right;" data-v-1d692bd7>839.6 us</td><td style="text-align:right;" data-v-1d692bd7>5.69 us</td><td style="text-align:right;" data-v-1d692bd7>1.04</td><td style="text-align:right;" data-v-1d692bd7>5.8594</td><td style="text-align:right;" data-v-1d692bd7>2.9297</td><td style="text-align:right;" data-v-1d692bd7>39 KB</td></tr><tr data-v-1d692bd7><td data-v-1d692bd7>DynamicLinq</td><td style="text-align:right;" data-v-1d692bd7>973.8 us</td><td style="text-align:right;" data-v-1d692bd7>8.65 us</td><td style="text-align:right;" data-v-1d692bd7>1.21</td><td style="text-align:right;" data-v-1d692bd7>19.5313</td><td style="text-align:right;" data-v-1d692bd7>9.7656</td><td style="text-align:right;" data-v-1d692bd7>123 KB</td></tr><tr data-v-1d692bd7><td data-v-1d692bd7>Sieve</td><td style="text-align:right;" data-v-1d692bd7>1,299.7 us</td><td style="text-align:right;" data-v-1d692bd7>12.74 us</td><td style="text-align:right;" data-v-1d692bd7>1.61</td><td style="text-align:right;" data-v-1d692bd7>7.8125</td><td style="text-align:right;" data-v-1d692bd7>3.9063</td><td style="text-align:right;" data-v-1d692bd7>53 KB</td></tr><tr data-v-1d692bd7><td data-v-1d692bd7>Fop</td><td style="text-align:right;" data-v-1d692bd7>3,498.6 us</td><td style="text-align:right;" data-v-1d692bd7>29.45 us</td><td style="text-align:right;" data-v-1d692bd7>4.34</td><td style="text-align:right;" data-v-1d692bd7>54.6875</td><td style="text-align:right;" data-v-1d692bd7>27.3438</td><td style="text-align:right;" data-v-1d692bd7>348 KB</td></tr><tr data-v-1d692bd7><td data-v-1d692bd7>CSharp Scripting</td><td style="text-align:right;" data-v-1d692bd7>231,510.6 us</td><td style="text-align:right;" data-v-1d692bd7>4,406.95 us</td><td style="text-align:right;" data-v-1d692bd7>287.13</td><td style="text-align:right;" data-v-1d692bd7>3000.0000</td><td style="text-align:right;" data-v-1d692bd7>1000.0000</td><td style="text-align:right;" data-v-1d692bd7>24,198 KB</td></tr></tbody></table>',3),f={class:"custom-container details"},I=r(()=>t("p",null,"BenchmarkDotNet=v0.13.1, OS=Windows 10.0.22000 11th Gen Intel Core i5-11400F 2.60GHz, 1 CPU, 12 logical and 6 physical cores .NET SDK=6.0.100 [Host] : .NET 6.0.0 (6.0.21.52210), X64 RyuJIT DefaultJob : .NET 6.0.0 (6.0.21.52210), X64 RyuJIT",-1)),k=a("This Benchmark is available "),S={href:"https://github.com/alirezanet/Gridify/blob/master/benchmark/LibraryComparisionFilteringBenchmark.cs",target:"_blank",rel:"noopener noreferrer"},w=a("Here");function N(d,B){const s=e("RouterLink"),n=e("ExternalLinkIcon");return o(),h(g,null,[u,t("ul",null,[t("li",null,[i(s,{to:"/example/api-controller.html"},{default:b(()=>[x]),_:1})]),m]),_,t("details",f,[I,t("p",null,[k,t("a",S,[w,i(n)])])])],64)}var F=p(y,[["render",N],["__scopeId","data-v-1d692bd7"]]);export{F as default};
